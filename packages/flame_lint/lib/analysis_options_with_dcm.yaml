include: analysis_options.yaml

# DCM rules defined here: https://dcm.dev/docs/rules/

dart_code_metrics:
  rules:
  # dart rules
    - avoid-substring
    # TODO(luan): enable arguments-ordering
    - avoid-banned-imports
    - avoid-cascade-after-if-null
    - avoid-collection-methods-with-unrelated-types
    - avoid-duplicate-exports
    - avoid-dynamic
    - avoid-global-state
    - avoid-ignoring-return-values
    - avoid-missing-enum-constant-in-map
    - avoid-nested-conditional-expressions
    - avoid-non-ascii-symbols
    - avoid-non-null-assertion
    - avoid-passing-async-when-sync-expected
    - avoid-redundant-async
    - avoid-throw-in-catch-block
    - avoid-top-level-members-in-tests
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - avoid-unused-parameters
    - ban-name
    - binary-expression-operand-order
    - double-literal-format
    - format-comment
    - newline-before-return
    - no-boolean-literal-compare
    - no-empty-block
    - no-equal-arguments
    - no-equal-then-else
    - no-object-declaration
    - prefer-async-await
    - prefer-commenting-analyzer-ignores
    - prefer-conditional-expressions
    - prefer-correct-identifier-length
    - prefer-correct-test-file-name
    - prefer-correct-type-name
    - prefer-enums-by-name
    - prefer-first
    - prefer-immediate-return
    - prefer-iterable-of
    - prefer-last
    # TODO(luan): enable prefer-match-file-name
    - prefer-moving-to-variable
    - prefer-static-class
    - prefer-trailing-comma
    - tag-name
    - avoid-long-parameter-list
    - avoid-long-functions
    - avoid-duplicate-named-imports
    - avoid-shadowing
    - prefer-return-await
    - avoid-collapsible-if
    - avoid-explicit-type-declaration
    - avoid-nested-switches
    - avoid-redundant-else
    - avoid-self-assignment
    - avoid-self-compare
    - avoid-unnecessary-nullable-return-type
    - avoid-unrelated-type-casts
    - format-test-name
    - no-equal-switch-case
    - no-equal-conditions
    - prefer-declaring-const-constructor
    - prefer-explicit-parameter-names
    - prefer-correct-switch-length
    - avoid-equal-expressions
    - avoid-declaring-call-method
    - prefer-early-return
    - avoid-missed-calls
    - avoid-redundant-pragma-inline
    - prefer-unwrapping-future-or
    - avoid-unnecessary-negations
    - avoid-banned-file-names
    - avoid-unused-generics
    - avoid-inverted-boolean-checks
    - avoid-banned-types
    - function-always-returns-null
    - prefer-visible-for-testing-on-members
    - avoid-throw-objects-without-tostring
    - avoid-unsafe-collection-methods
    - avoid-one-field-records
    - move-records-to-typedefs
    - avoid-bottom-type-in-records
    - avoid-nested-records
    - avoid-function-type-in-records
    - avoid-positional-record-field-access
    - avoid-mixing-named-and-positional-fields
    - avoid-long-records
    - match-positional-field-names-on-assignment
    - avoid-redundant-positional-field-name
    - avoid-nested-switch-expressions
    - avoid-bottom-type-in-patterns
    - avoid-explicit-pattern-field-name
    - prefer-wildcard-pattern
    - no-equal-switch-expression-cases
    - prefer-simpler-patterns-null-check
    - avoid-duplicate-patterns
    - prefer-returning-conditional-expressions
    - avoid-unnecessary-return
    - avoid-future-tostring
    - avoid-unassigned-late-fields-keyword
    - prefer-test-matchers
    - prefer-correct-future-return-type
    - prefer-correct-stream-return-type
    - avoid-nested-futures
    - avoid-nested-streams-and-futures
    - avoid-accessing-other-classes-private-members
    - avoid-generics-shadowing
    - avoid-uncaught-future-errors
    - prefer-parentheses-with-if-null
    - prefer-type-over-var
    - avoid-keywords-in-wildcard-pattern
    - avoid-misused-wildcard-pattern
    - avoid-mutating-parameters
    - avoid-unnecessary-call
    - no-equal-nested-conditions
    - avoid-negated-conditions
    - prefer-correct-error-name
    - map-keys-ordering
    - avoid-unnecessary-futures
    - avoid-shadowed-extension-methods
    - avoid-barrel-files
    - avoid-importing-entrypoint-exports
    - avoid-double-slash-imports
    - avoid-unnecessary-conditionals
    - missing-test-assertion
    - avoid-map-keys-contains
    - prefer-correct-json-casts
    - avoid-async-call-in-sync-function
    - avoid-duplicate-mixins
    - avoid-nullable-interpolation
    - enum-constants-ordering
    - prefer-named-boolean-parameters
    - avoid-unused-instances
    - prefer-correct-for-loop-increment
    - prefer-public-exception-classes
    - match-class-name-pattern
    - newline-before-case
    - avoid-unnecessary-reassignment
  # flutter rules
    - prefer-define-hero-tag
    - always-remove-listener
    - avoid-border-all
    - avoid-returning-widgets
    - avoid-shrink-wrap-in-lists
    - avoid-unnecessary-setstate
    - avoid-expanded-as-spacer
    - avoid-wrapping-in-padding
    - check-for-equals-in-render-object-setters
    - consistent-update-render-object
    - prefer-const-border-radius
    - prefer-correct-edge-insets-constructor
    - prefer-extracting-callbacks
    - prefer-single-widget-per-file
    - prefer-using-list-view
    - use-setstate-synchronously
    - avoid-incomplete-copy-with
    - proper-super-calls
    - add-copy-with
    - dispose-fields
    - avoid-empty-setstate
    - prefer-widget-private-members
    - prefer-action-button-tooltip
    - avoid-inherited-widget-in-initstate
    - avoid-late-context
    - avoid-state-constructors
    - avoid-unnecessary-stateful-widgets
    - avoid-stateless-widget-initialized-fields
    - avoid-missing-image-alt
    - avoid-unnecessary-overrides-in-state
    - prefer-dedicated-media-query-methods
    - avoid-recursive-widget-calls
    - prefer-text-rich